# -*- eval: (setq org-download-image-dir (file-name-sans-extension (buffer-name))); -*-
# -*- org-export-babel-evaluate: nil; -*-
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="../orgstyle.css"/>
#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:t arch:headline author:t c:nil S:nil -:nil
#+OPTIONS: creator:nil d:(not "En") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t 
#+OPTIONS: ^:{}
#+LATEX_CLASS: ctexart
#+STARTUP: entitiespretty:t
#+TITLE: C 语言学习笔记
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 26.0.50.2 (Org mode 9.0.4)

学C语言不可能不去了解底层计算机体系结构和操作系统的原理

* 声明和定义
  C语言中的声明(Declaration)有变量声明、函数声明和类型声明三种。如果一个变量或函数的声明要求编译器为它分配存储空间,那么也可以称为定义(Definition),因此定义是声明的一种。从结构体开始我们会看到类型声明,声明一个类型是不分配存储空间的,但似乎叫“类型定义”听起来也不错,所以在有些书中“类型定义”和“类型声明”表示相同的含义。

  变量一定要*先声明后使用*，变量声明中的类型表明这个变量代表多大的一块存储空间,这样编译器才知道如何读写这块存储空间。
  定义一个变量,就是分配一块存储空间并给它命名;给一个变量赋值,就是把一个值保存到这块存储空间中。变量的定义和赋值也可以一步完成,这称为变量的初始化(Initialization)。

  函数声明、函数定义、函数原型(Prototype)。比如 void threeline(void) 这一行,声明了一个函数的名字、参数类型和个数、返回值类型,这称为函数原型。在代码中可以单独写一个函数原型,后面加;号结束,而不写函数体,例如:
  #+BEGIN_SRC C
  void threeline(void);
  #+END_SRC
  这种写法只能叫函数声明而不能叫函数定义,只有带函数体的声明才叫定义。其实编译器只有见到函数定义才会生成指令,而指令在程序运行时要占存储空间。
  那么没有函数体的函数声明有什么用呢?它为编译器提供了有用的信息,编译器在翻译代码的过程中,只有见到函数原型(不管带不带函数体)之后，才知道这个函数的名字、参数类型和返回值,这样碰到函数调用时才知道怎么生成相应的指令,所以函数原型必须出现在函数调用之前,这也是遵循“先声明后使用”的原则。

** extern 和 static
   extern 关键字表示这个标识符具有External Linkage。
   如果要把多个.c文件链接在一起，某个标识符在这些文件中都有声明（必须有且只有一个声明是定义,如果有多个定义,或者一个定义都没有,链接器就无法完成链接），那么这些声明指的都是同一个东西，链接之后是同一个 GLOBAL 符号，代表同一个地址。
*** 修饰函数声明
    函数声明中的 extern 也可以省略不写,不写 extern 的函数声明也表示这个函数具有External Linkage。

    如果用 static 关键字修饰一个函数声明,则表示该标识符具有Internal Linkage。

*** 修饰变量声明
    变量声明中的 extern 如果不写，意思就完全变了, 就表示函数中定义一个局部变。

    另外要注意, 除了定义变量时可以初始化,其他地方的声明不能加initializer。

    static 关键字把变量声明为Internal Linkage。
    这样,即使在外部即使用 extern 声明也访问不到 static 的变量。从而保护了模块的内部状态,这也是一种封装(Encapsulation)的思想。

* 头文件和库函数
  程序第一行的#号和 include 表示包含一个头文件(这些头文件通常位于 /usr/include 目录下)。

  为什么include 有时候用角括号： #include <stdio.h> ,而有时候用引号： #include "stack.h" 。
  对于用角括号包含的头文件, gcc 首先查找 -I 选项指定的目录,然后查找系统的头文件目录(通常是 /usr/include ,在某个系统上还包括 /usr/lib/gcc/i486-linux-gnu/4.3.2/include );
  而对于用引号包含的头文件, gcc 首先查找包含头文件的 .c 文件所在的目录,然后查找 -I 选项指定的目录,然后查找系统的头文件目录。

  头文件中的变量和函数声明一定不能是定义。如果头文件中出现变量或函数定义,这个头文件又被多个 .c 文件包含,那么这些 .c 文件就不能链接在一起了。（重复定义函数）

  头文件中声明了我们程序中使用的库函数,根据先声明后使用的原则, 要使用 printf 函数必须包含 stdio.h ,要使用数学函数必须包含 math.h ,如果什么库函数都不使用就不必包含任何头文件。

  使用 math.h 中声明的库函数有一点特殊之处： gcc 命令行必须加 -lm 选项,因为数学函数位于 libm.so 库文件中(这些库文件通常位于 /lib 目录下), -lm 选项告诉编译器，程序中用到的数学函数要到这个库文件里找。

  大部分库函数(例如 printf )位于 libc.so 库文件中，使用 libc.so 中的库函数在编译时不需要加 -lc 选项，这是 gcc 的默认选项。

  一些函数对应的头文件
  | 函数   | 头文件   |
  |--------+----------|
  | rand   | stdlib.h |
  | printf | stdio.h  |
  | sin 等 | math.h   |
  | time   | time.h   |

** 伪随机数
   C标准库中生成伪随机数的是 rand 函数,使用这个函数需要包含头文件 stdlib.h ,它没有参数,返回值是一个介于0和 RAND_MAX 之间的接近均匀分布的整数。RAND_MAX 是该头文件中定义的一个常量,在不同的平台上有不同的取值,但可以肯定它是一个非常大的整数。

   伪随机数,是用一套确定的公式基于某个初值算出来的,只要初值相同,随后的整个数列就都相同。实际应用中不可能使用每次都一样的随机数,例如开发一个麻将游戏,每次运行这个游戏摸到的牌不应该是一样的。因此,C标准库允许我们自己指定一个初值,然后在此基础上生成伪随机数,这个初值称为Seed,可以用 srand 函数指定Seed。通常我们通过别的途径得到一个不确定的数作为Seed,例如调用 time 函数得到当前系统时间距1970年1月1日00:00:00 [18] 的秒数,然后传给 srand :
   srand(time(NULL));
   然后再调用 rand ,得到的随机数就和刚才完全不同了。调用 time 函数需要包含头文件 time.h ,这里的 NULL 表示空指针。

* C标准库
  C标准库定义了一组标准头文件,每个头文件中包含一些相关的函数、变量、类型声明和宏定义。

  要在一个平台上支持C语言,不仅要实现C编译器,还要实现C标准库,这样的实现才算符合C标准。不符合C标准的实现也是存在的,例如很多单片机的C语言开发工具中只有C编译器而没有完整的C标准库。

  Linux平台上最广泛使用的C函数库是 glibc。

* 程序如何执行
  编译器的工作分为两个阶段,先是预处理(Preprocess)阶段,然后才是编译阶段,用 gcc 的 -E 选项可以看到预处理之后、编译之前的程序。
  gcc -E main.c
  cpp main.c 命令也可以达到同样的效果,只做预处理而不编译, cpp 表示C preprocessor。
** 预处理
   像 #include 和 #define 这种以#号开头的行称为预处理指示(Preprocessing Directive)。
   在预处理阶段,如果一行以#号开头,后面跟 include 或 define ,预处理器就认为这是一条预处理指示,除此之外出现在其它地方的 include 或 define 预处理器并不关心,只是当成普通标识符交给编译阶段去处理。

*** 宏定义
    define 不仅用于定义常量,也可以定义更复杂的语法结构,称为宏(Macro)定义。
**** 变量式宏定义(Object-like Macro)
     用 #define 可以定义一个常量：
     #define N 20
     #define N 20 或 #define STR "hello, world" 这种宏定义可以称为变量式宏定义
**** 函数式宏定义(Function-like Macro)
     1. 函数式宏定义的参数没有类型,预处理器只负责做形式上的替换,而不做参数类型检查；
     2. 调用真正函数的代码和调用函数式宏定义的代码编译生成的指令不同。
     真正的函数编译生成指令,代码中出现的每次调用也要编译生成 *传参指令* 和 *call指令*。
     而函数式宏定义,宏定义本身不必编译生成指令,但是代码中出现的每次调用编译生成的指令都相当于一个函数体,而不是简单的几条传参指令
     和 call 指令。所以,使用函数式宏定义编译生成的目标文件会比较大。
     3. 定义这种宏要格外小心,不能省去内层括号和外层括号。
     4. 调用函数时先求实参表达式的值再传给形参,如果实参表达式有Side Effect,那么这些Side
     Effect只发生一次。而宏定义,Side Effect 可能会发生多次。
     5. 即使实参没有Side Effect,使用函数式宏定义也往往会导致较低的代码执行效率。

     函数式宏定义和真正的函数相比有很多缺点,但只要小心使用还是会显著提高代码的执行效率,毕竟省去了分配和释放栈帧、传参、传返回值等一系列工作,因此那些简短并且被频繁调用的函数经常用函数式宏定义来代替实现。

     C标准库的很多函数都提供两种实现,一种是真正的函数实现,一种是宏定义实现。
     inline 关键字告诉编译器,这个函数的调用要尽可能快,可以当普通的函数调用实现,也可以用宏展开的办法实现。
     #+BEGIN_SRC C
     static inline void f(){}
     #+END_SRC

**** 宏的特殊写法
     - #、##运算符和可变参数
     - define 和 枚举
       define 定义是在预处理阶段处理的,而枚举是在编译阶段处理的。
     - undef
       如果需要重新定义一个宏,和原来的定义不同,可以先用 #undef 取消原来的定义,再重新定义
       如果先前没有定义过 XXX,用 #undef XXX 取消它的定义没有任何作用,也不算错。
     - 条件预处理指示
       #+BEGIN_SRC C
       #ifndef HEADER_FILENAME
       #define HEADER_FILENAME
       /* body of header */
       #endif
       #+END_SRC
       #+BEGIN_SRC C
       #if MACHINE == 68000
       int x;
       #elif MACHINE == 8086
       long x;
       #else
       /* all others */
       #error UNKNOWN TARGET MACHINE
       #endif     
       #+END_SRC
       #ifdef 或 #if 可以嵌套使用,但预处理指示通常都顶头写不缩进,为了区分嵌套的层次,可以在 #endif 处用注释写清楚它结束的是哪个 #if 或 ifdef。
     - 不用 #define 定义宏
       1. 编译命令行加上选项 -DNDEBUG 就相当于在源文件开头定义了 NDEBUG 宏。
       2. 
*** 查看预处理
    gcc 的 -E 选项可以看到预处理之后、编译之前的程序；
    cpp main.c 命令也可以达到只做预处理而不编译, cpp 表示C preprocessor。



** 库
   库文件名都是以 lib 开头的,静态库以 .a 作为后缀,表示Archive。
   共享库以.so 作为后缀。

   默认情况下，编译器是优先考虑共享库的,如果希望编译器只链接静态库,可以指定 -static 选项。

   链接 libc 共享库时只是指定了动态链接器和该程序所需要的库文件,并没有真的做链接,可执行文件 main 中调用的库函数仍然是未定义符号,要在运行时做动态链接。
   而在链接静态库时,链接器会把静态库中的目标文件取出来和可执行文件真正链接在一起。
   使用静态库的一个好处,链接器可以从静态库中只取出需要的部分来做链接；

** 编译步骤：
   - 编译成目标文件
     #+BEGIN_SRC sh
     gcc -c xxx.c
     #+END_SRC
   - 打包成一个静态库
     #+BEGIN_SRC sh
     ar rs name_of_lib.a xxx.o
     #+END_SRC
     选项 r 表示将后面的文件列表添加到文件包,如果文件包不存在就创建它,如果文件包中已有同名文件就替换成新的。 s 是专用于生成静态库的,表示为静态库创建索引,这个索引被链接器使用。 ranlib 命令也可以为静态库创建索引,以上命令等价于:
     #+BEGIN_SRC sh
     ar r name_of_lib.a xxx.o
     ranlib name_of_lib.a
     #+END_SRC
   - 把 name_of_lib.a 和 main.c 编译链接在一起:
     #+BEGIN_SRC sh
     gcc main.c -L. -lstack -Istack -o main
     #+END_SRC
     -L 选项告诉编译器去哪里找需要的库文件, -L. 表示在当前目录找。 -lstack 告诉编译器要链接 libstack 库, -I 选项告诉编译器去哪里找头文件。注意,即使库文件就在当前目录,编译器默认也不会去找的,所以 -L. 选项不能少。编译器默认会找的目录可以用 -print-search-dirs 选项查看

* 用户命令和系统管理命令
  区分用户命令和系统管理命令,用户命令通常位于 /bin 和 /usr/bin 目录,系统管理命令通常位于 /sbin 和 /usr/sbin 目录。
  一般用户可以执行用户命令,而执行系统管理命令经常需要 root 权限。

* 初始化全局变量
  程序开始运行时要用适当的值来初始化全局变量,所以初始值必须保存在编译生成的可执行文件中,因此初始值在编译时就要计算出来。

  而局部变量的初始化是在程序运行时实现的。请注意区分编译时和运行时这两个概念。
  为了简化编译器的实现,C语言从语法上规定全局变量只能用常量表达式来初始化。

  如果全局变量在定义时不初始化则初始值是0,如果局部变量在定义时不初始化则初始值是不确定的。
  所以,局部变量在使用之前一定要先赋值。

* C语法
** for
   C 正常写法：
   #+BEGIN_SRC c
   int i;
   for(i = 1; i <= n; ++i)
   #+END_SRC
   C99规定了一种新的 for 循环语法：
   #+BEGIN_SRC c
   for(int i = 1; i <= n; i++)
   #+END_SRC
   这个程序用 gcc 编译要加上选项 -std=c99 。这种语法也是从C++借鉴的,考虑到兼容性不建议使用这种写法。
** complex
   C99已经定义了复数类型 _Complex 。如果包含C标准库的头文件 complex.h ,也可以用 complex 做类型名。
** 数组
   对于数组类型有一条特殊规则:数组类型做右值使用时,自动转换成指向数组首元素的指针。

** 字符串
   字符串字面值是只读的,不允许修改。
   字符串字面值还有一点和数组名类似,做右值使用时自动转换成指向首元素的指针。
** ++和--
   ++称为前缀自增运算符(Prefix Increment Operator),类似地,--称为前缀自减运算符(Prefix Decrement Operator)

   ++i 相当于 i = i + 1 
   --i 相当于 i = i - 1

   把 ++i 这个表达式看作一个函数调用,除了传入一个参数返回一个值(等于参数值加1)之外,还产生一个Side Effect,就是把变量 i 的值增加了1。


   ++ 和 -- 运算符用在变量后面称为后缀自增运算符(Postfix Increment Operator)和后缀自减运算符(Postfix Decrement Operator)。
   i++把变量 i 的值增加了1,它和 ++i 的区别就在于返回值不同，返回值还是未加1的i。
   同理, --i 返回减1之后的值,而 i-- 返回减1之前的值

   可以这样理解：
   a[++i]=10; 相当于 i=i+1;a[i]=10; (加号在前，先加后用)
   a[i++]=10; 相当于 a[i]=10;i=i+1; (加号在后，先用后加)
** 指针
   - 取地址&:
     #+BEGIN_SRC C
     int ival=1;
     int *p = &ival;
     #+END_SRC
     对于不同类型的指针变量,它们的内存单元都占4个字节（32位平台）,因为要保存32位的虚拟地址。
     同理,在64位平台上指针变量都占8个字节。

   - 解引用 *:
     #+BEGIN_SRC C
     int ival=1;
     int *p = &ival;
     cout<<*p;
     #+END_SRC
   - 野指针
     指向不确定地址的指针称为“野指针”(Unbound Pointer),为避免出现野指针,在定义指针变量时就应该给它明确的初值,或者把它初始化为 NULL。
   - 空指针
     NULL 在C标准库的头文件 stddef.h 中定义:
     #+BEGIN_SRC C
     #define NULL ((void *)0)
     #+END_SRC
     就是把地址0转换成指针类型,称为空指针。操作系统不会把任何数据保存在地址0及其附近,也不会把地址0~0xfff的页面映射到物理内存,所以任何对地址0的访问都会立刻导致段错误。就像放在眼前的炸弹一样很容易找到,相比之下,野指针的错误就像埋下地雷一样,更难发现和排除,这次走过去没事,下次走过去就有事。
   - void * 指针
      void * 指针和别的指针一样都占4个字节（32bit）。它是一种通用指针,可以转换为任意其它类型的指针,任意其它类型的指针也可以转换为通用指针。
     void * 指针常用于函数接口。

*** 用途
    - 指针用作参数
      尽管在函数的作用域中访问不到变量名,却可以通过地址访问它们。
    - 指针与数组
      - 同一性：
        #+BEGIN_SRC C
        int a[10];
        int *pa = &a[0];
        pa++;
        #+END_SRC
        首先指针 pa 指向 a[0] 的地址,注意后缀运算符的优先级高于单目运算符,所以是取 a[0] 的地址,而不是取 a 的地址。
        然后 pa++ 就是 a[1]。
        由于 a 做右值使用时和 &a[0] 是一个意思,所以 int *pa = &a[0]; 通常写成更简洁的形式 int *pa = a;
      - 差异性
        数组名做右值时转换成指向首元素的指针,但做左值仍然表示整个数组的存储空间,而不是首元素的存储空间。
        数组名做左值还有一点特殊之处,不支持 ++ 、赋值这些运算符,但支持取地址运算符 &。
      - 函数形参
        在函数原型中,如果参数是数组,则等价于参数是指针的形式,例如:
        #+BEGIN_SRC C
        void func(int a[10])
        {
        ...
        }
        #+END_SRC
        等价于:
        #+BEGIN_SRC C
        void func(int *a)
        {
        ...
        }
        #+END_SRC
        仍然等价于:
        #+BEGIN_SRC C
        void func(int a[])
        {
        ...
        }
        #+END_SRC
        参数写成指针形式还是数组形式对编译器来说没区别,都表示这个参数是指针,之所以规定两种形式是为了给读代码的人提供有用的信息,如果这个参数指向一个元素,通常写成指针的形式,如果这个参数指向一串元素中的首元素,则经常写成数组的形式。

    - 指针与结构体
      首先定义一个结构体类型,然后定义这种类型的变量和指针:
      #+BEGIN_SRC C
      struct unit {
        char c;
        int num;
      };
      struct unit u;
      struct unit *p = &u;
      #+END_SRC
      要通过指针 p 访问结构体成员可以写成 (*p).c 和 (*p).num ,为了书写方便,C语言提供了 -> 运算符, 也可以写成 p->c 和 p->num 。
    - 指向指针的指针与指针数组
      a 由10个元素组成,每个元素都是 int * 指针:
      int *a[10];
      这称为指针数组。
    - 指向数组的指针与多维数组
      定义一个指向数组的指针,该数组有10个 int 元素:
      #+BEGIN_SRC C
      int (*a)[10];
      #+END_SRC
      和上一节指针数组的定义 int *a[10]; 相比,仅仅多了一个 () 括号。如何记住和区分这两种定义
      呢?我们可以认为 [] 比 * 有更高的优先级,如果 a 先和 * 结合则表示 a 是一个指针,如果 a 先和 [] 结合
      则表示 a 是一个数组。 int *a[10]; 这个定义可以拆成两句:
      #+BEGIN_SRC C
      typedef int *t;
      t a[10];
      #+END_SRC
      t 代表 int * 类型, a 则是由这种类型的元素组成的数组。 int (*a)[10]; 这个定义也可以拆成两句:
      #+BEGIN_SRC C
      typedef int t[10];
      t *a;
      #+END_SRC
      t 代表由10个 int 组成的数组类型, a 则是指向这种类型的指针。
    - 函数类型和函数指针类型
      函数类型和数组类型类似,做右值使用时自动转换成函数指针类型,所以可以直接赋给 f ,当然也可以加上 & 先取地址再赋给 f。
    - 

** 建立UDP连接
   http://www.microhowto.info/howto/send_a_udp_datagram_in_c.html


* makefile
  make 命令会自动读取当前目录下的 Makefile 文件，完成相应的编译步骤。
** makefile 语法
*** 规则
    Makefile由一组规则(Rule)组成,每条规则的格式是:
    #+BEGIN_EXAMPLE
    target ... : prerequisites ...
      command1
      command2
      ...
    #+END_EXAMPLE
    例如:
    #+BEGIN_EXAMPLE
    main: main.o stack.o maze.o
      gcc main.o stack.o maze.o -o main
    #+END_EXAMPLE
    main 是这条规则的目标(Target), main.o、 stack.o 和 maze.o 是这条规则的条件(Prerequisite)。

    目标和条件之间的关系是:欲更新目标,必须首先更新它的所有条件;所有条件中只要有一个条件被更新了,目标也必须随之被更新。
    所谓“*更新*”就是执行一遍规则中的命令列表。

    命令列表中的每条命令必须以一个Tab开头,注意不能是空格,Makefile的格式不像C语言的缩进那么随意,对于Makefile中的每个以Tab开头的命令, make 会创建一个Shell进程去执行它。

    关于多个命令：如果要让上一条命令的结果应用在下一条命令，应该使用分号分隔这两条命令。比如你的第一条命令是cd命令，你希望第二条命令得在cd之后的基础上运行，那么你就不能把这两条命令写在两行上，而应该把这两条命令写在一行上，用分号分隔。
**** 隐含规则和模式规则
     如果一个目标在Makefile中的所有规则都没有命令列表, make 会尝试在内建的隐含规则(Implicit Rule)数据库中查找适用的规则。
     一种特殊的规则,称为模式规则(Pattern Rule)。

     整个过程是这样的：在Makefile中以 main.o 为目标的规则都没有命令列表,所以 make 会查找隐含规则,发现隐含规则中有这样一条模式规则
     #+BEGIN_EXAMPLE
     %.o: %.c
     #  recipe to execute (built-in):
       $(COMPILE.c) $(OUTPUT_OPTION) $<
     #+END_EXAMPLE
     适用, main.o 符合 %.o 的模式,现在 % 就代表 main (称为 main.o 这个名字的Stem),再替换到 %.c 中就是 main.c 。
**** 多目标规则
     对于多目标的规则, make 会拆成几条单目标的规则来处理,例如
     #+BEGIN_EXAMPLE
     target1 target2: prerequisite1 prerequisite2
       command $< -o $@
     #+END_EXAMPLE
     这样一条规则相当于:
     #+BEGIN_EXAMPLE
     target1: prerequisite1 prerequisite2
       command prerequisite1 -o target1
     target2: prerequisite1 prerequisite2
       command prerequisite1 -o target2
     #+END_EXAMPLE
     注意两条规则的命令列表是一样的,但 $@ 的取值不同。
*** 注释
    \# 号在Makefile中表示单行注释。Makefile中只有行注释。
*** 变量
    - cc:
      cc 是一个符号链接,通常指向 gcc ,在有些UNIX系统上可能指向另外一种C编译器。
    - =
      等号用于一般的定义和赋值，用 CC = cc 对CC定义和赋值，CC 是一个Makefile变量。
      一个变量的定义从=后面的第一个非空白字符开始,包括后面的所有字符,直到注释或换行之前结束，当要包含一些空格时，可在行尾加注释（# end of the line），以标明结束位置。
    - 取值（展开）：
      用 $(CC) 取它的值,其值应该是 cc。Makefile变量像C的宏定义一样,代表一串字符,在取值的地方展开。
      没有定义的变量展开是空。
    - :=
      立即展开变量，区别于=
    - ?=
      如果左边的变量没有定义过,那么 ?= 相当于 =;
      如果先前已经定义了,则什么也不做,不会重新赋值。
    - +=
      给变量追加值，保持变量先前定义方式的特性（例如 = 或 :=）。如果变量还没有定义过就直接用 += 赋值,那么 += 相当于 =。
    - $@:
      $@ 的取值为规则中的目标
    - $<:
      $< 的取值为规则中的第一个条件
    - $?:
      表示规则中所有比目标新的条件,组成一个列表,以空格分隔。

      $? 用法举例：有时候希望只对更新过的条件进行操作,例如有一个库文件 libsome.a 依赖于几个目标文件:
      #+BEGIN_EXAMPLE
      libsome.a: foo.o bar.o lose.o win.o
          ar r libsome.a $?
          ranlib libsome.a
      #+END_EXAMPLE 
      这样,只有更新过的目标文件才需要重新打包到 libsome.a 中,没更新过的目标文件原本已经在 libsome.a 中了,不必重新打包。
    - $^:
      表示规则中的所有条件,组成一个列表,以空格分隔。
    - $%
      仅当目标是函数库文件中，表示规则中的目标成员名。例如，如果一个目标是"foo.a(bar.o)"，那么，"$%"就是"bar.o"，"$@"就是"foo.a"。如果目标不是函数库文件（Unix下是[.a]，Windows下是[.lib]），那么，其值为空。
    - $+
      这个变量很像"$^"，也是所有依赖目标的集合。只是它不去除重复的依赖目标。
    - $*
      这个变量表示目标模式中"%"及其之前的部分。如果目标是"dir/a.foo.b"，并且目标的模式是"a.%.b"，那么，"$*"的值就是"dir/a.foo"。这个变量对于构造有关联的文件名是比较有较。如果目标中没有模式的定义，那么"$*"也就不能被推导出，但是，如果目标文件的后缀是make所识别的，那么"$*"就是除了后缀的那一部分。例如：如果目标是"foo.c"，因为".c"是make所能识别的后缀名，所以，"$*"的值就是"foo"。这个特性是GNU make的，很有可能不兼容于其它版本的make，所以，你应该尽量避免使用"$*"，除非是在隐含规则或是静态模式中。如果目标中的后缀是make所不能识别的，那么"$*"就是空值。
** 使用makefile
   在命令行输入 `make` 即可。

   执行 make 命令时,是按照 GNUmakefile、makefile、Makefile 的顺序找到第一个存在的文件并执行它,不过还是建议使用 Makefile 做文件名。

   输入make时，可以指定一个目标(例如 make clean ), 则更新这个目标,如果不指定目标则更新Makefile中第一条规则的目标(缺省目标)。

** clean 规则
   通常Makefile都会有一个 clean 规则,用于清除编译过程中产生的二进制文件,保留源文件。
   例如：
   #+BEGIN_EXAMPLE
   clean:
     @echo "cleanning project"
     -rm main *.o
     @echo "clean completed"
   #+END_EXAMPLE

   和前面介绍的规则不同, clean 目标不依赖于任何条件,并且执行它的命令列表不会生成 clean 这个文件。这也符合更新的定义,只要执行了命令列表就算更新了目标,即使目标并没有生成也算。

   这clean规则添加到我们的Makefile末尾,然后执行：
   #+BEGIN_SRC sh
   make clean
   #+END_SRC
** 伪目标 .PHONY
   如果当前目录下存在一个文件叫 clean 这个文件, clean 目标又不依赖于任何条件, make 就认为它不需要更新了。
   而实际上我们希望把 clean 当作一个特殊的名字使用,不管它存在不存在都要更新。可以通过添一条特殊规则来实现，即把 clean 声明为一个伪目标:
   #+BEGIN_EXAMPLE
   .PHONY: clean
   #+END_EXAMPLE
   这条规则没有命令列表。在C语言中要求变量和函数先声明后使用,而Makefile不太一样,这条规则写在 clean: 规则的后面也行,也能起到声明 clean 是伪目标的作用。这是因为 make 在处理Makefile 时首先会从前到后读取所有规则,建立起一个完整的依赖关系图。
** 常用的约定目标
   1. all: 执行主要的编译工作,通常用作缺省目标。
   2. install: 执行编译后的安装工作,把可执行文件、配置文件、文档等分别拷到不同的安装目
   录。
   3. clean: 删除编译生成的二进制文件。
   4. distclean: 不仅删除编译生成的二进制文件,也删除其它生成的文件,例如配置文件和格式转换后的文档,执行 make distclean 之后应该清除所有这些文件,只留下源文件。
** 命令
*** export
    传递变量到下级Makefile中，可以使用这样的声明：
    export <variable ...>;
    不想让某些变量传递到下级Makefile中，可以这样声明：
    unexport <variable ...>;

    如果你要传递所有的变量，那么只要一个export就行了。后面什么也不用跟，表示传递所有的变量。

    需要注意的是，有两个变量，一个是SHELL，一个是MAKEFLAGS，这两个变量不管你是否export，其总是要传递到下层Makefile中，特别是MAKEFILES变量，其中包含了make的参数信息，如果我们执行“总控Makefile”时有make参数或是在上层Makefile中定义了这个变量，那么MAKEFILES变量将会是这些参数，并会传递到下层Makefile中，这是一个系统级的环境变量。

*** 命令前面加 @
    如果 make 执行的命令前面加了 @ 字符,则不显示命令本身而只显示它的结果。
*** 命令前面加 -
    如果命令前面加了 - 号,即使这条命令出错, make 也会继续执行后续命令。
    通常 make 执行的命令如果出错(该命令的退出状态非0)就立刻终止,不再执行后续命令。
    rm 命令和 mkdir 命令前面通常要加 - 号,因为 rm 要删除的文件可能不存在, mkdir 要创建的目录可能已存在,这两个命令都有可能出错,但这种错误是应该忽略的。
*** 常用的 make 命令行选项
    1. -n
       -n选项只打印要执行的命令,而不会真的执行命令,这个选项有助于我们检查Makefile写得是否正确,由于Makefile不是顺序执行的,用这个选项可以先看看命令的执行顺序,确认无误了再真正执行命令。
    2. -C
       首先进入子目录而后再执行命令。
       含-C的Makefile叫做“总控Makefile”，总控Makefile的变量可以传递到下级的Makefile中（如果你显示的声明），但是不会覆盖下层的Makefile中所定义的变量，除非指定了“-e”参数。
    3. -e
       覆盖下级Makefile 中定义的变量。
    4. -s
       “-s”或“--slient”则是全面禁止命令的显示。
    5. -w
       在“嵌套执行”中比较有用的参数，“-w”或是“--print-directory”会在make的过程中输出一些信息，让你看到目前的工作目录[fn:2]。
       当你使用“-C”参数来指定make下层Makefile时，“-w”会被自动打开的。如果参数中有“-s”（“--slient”）或是“--no-print-directory”，那么，“-w”总是失效的。
    6. -i
       给make加上“-i”或是“--ignore-errors”参数，那么，Makefile中所有命令都会忽略错误。
    7. -k
       “-k”或是“--keep-going”，这个参数的意思是，如果某规则中的命令出错了，那么就终目该规则的执行，但继续执行其它规则，有点for循环中的continue的意思。
    8. -f
       如果要指定特定的Makefile，你可以使用make的“-f”和“--file”参数，如：make -f Make.linux或make --file Make.AIX

    如何理解[fn:1]
    $(MAKE) -e -C dir
    “$(MAKE)”是对变量“MAKE”的引用（变量“MAKE”的值指向make可执行文件，一般为/usr/bin/make）
* Footnotes

[fn:2] http://www.tuicool.com/articles/YRRNrqe

[fn:1] http://blog.csdn.net/davion_zhang/article/details/9716869

